{
	"info": {
		"_postman_id": "0d4ada5b-5d75-4905-ad9f-706252d5effb",
		"name": "Restful Booker",
		"description": "## Overview\nThe Restful Booker API is a sample API based on hotel bookings. The API contains endpoints to demonstrate CRUD operations. The source code can be obtained from https://github.com/mwinteringham/restful-booker\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.globals.set(\"my_booker_token\", pm.response.json().token);",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"pm.globals.get(\"token\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var status_code = 200;",
									"pm.test(\"Status code is \" + status_code, function () {",
									"    pm.response.to.have.status(status_code);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check Booking\" , function () {",
									"    pm.expect (jsonData.booking).to.not.equal(null);",
									"});",
									"",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test('Number of plans returned = ' + Object.keys(data).length, function () {",
									"    pm.expect(data.length).to.equal(data.length);",
									"",
									"    pm.globals.set(\"data\",data.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var responseCode = 200;",
									"",
									"var createBookingBody = JSON.parse(pm.environment.get(\"createBookingBody\"))",
									"",
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.globals.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"pm.test(\"Post Status code should be \" + responseCode, function () {",
									"    pm.response.to.have.status(responseCode);",
									"});",
									"",
									"pm.test(\"Check firstname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.firstname).to.equal(createBookingBody.firstname);",
									"});",
									"",
									"pm.test(\"Check lastname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.lastname).to.equal(createBookingBody.lastname);",
									"});",
									"pm.test(\"Check total price of new Booking\", function () {",
									"    pm.expect(jsonData.booking.totalprice).to.equal(createBookingBody.totalprice);",
									"});",
									"pm.test(\"Check if deposit is paid of new Booking\", function () {",
									"    pm.expect(jsonData.booking.depositpaid).to.equal(createBookingBody.depositpaid);",
									"});",
									"",
									"pm.test(\"Check if addtional needs is breakfast of new Booking\", function () {",
									"    pm.expect(jsonData.booking.additionalneeds).to.equal(createBookingBody.additionalneeds);",
									"});",
									"",
									"pm.test(\"Check checkin date of new Booking\", function () {",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.equal(createBookingBody.bookingdates.checkin);",
									"});",
									"",
									"pm.test(\"Check checkout date of new Booking\", function () {",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.equal(createBookingBody.bookingdates.checkout);",
									"});",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test(\"Status code should be \" + responseCode, function () {",
									"        pm.response.to.have.status(responseCode);",
									"    });",
									"    ",
									"    pm.test(\"Get firstname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.firstname).to.equal(createBookingBody.firstname);",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{createBookingBody}}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get nummber Of booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var status_code = 200;",
									"pm.test(\"Status code is \" + status_code, function () {",
									"    pm.response.to.have.status(status_code);",
									"});",
									"",
									"",
									"",
									"var data = pm.response.json();",
									"pm.test('Number of plans returned = ' + Object.keys(data).length, function () {",
									"    pm.expect(Object.keys(data).length-1).to.equal(pm.globals.get(\"data\"))",
									"    pm.globals.get(\"data\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check Booking\" , function () {\r",
									"    pm.expect (jsonData.booking).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"Test firstname\", function () {\r",
									"   pm.expect(jsonData.firstname).to.eql(\"Sally\");\r",
									"});\r",
									"pm.test(\"Test Lastname\", function () {\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
									"});\r",
									"pm.test(\"Test totalprice\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.eql(111);\r",
									"});\r",
									"pm.test(\"Test depositpaid\", function () {\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"});\r",
									"pm.test(\"Test checkin\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2020-03-06\");\r",
									"});\r",
									"pm.test(\"Test checkout\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2020-03-09\");\r",
									"});\r",
									"pm.test(\"Test additionalneeds\", function () {\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check Booking\" , function () {\r",
									"    pm.expect (jsonData.booking).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Test firstname\", function () {\r",
									"   pm.expect(jsonData.firstname).to.include(\"James\");\r",
									"});\r",
									"pm.test(\"Test Lastname\", function () {\r",
									"    pm.expect(jsonData.lastname).to.include(\"Brown\");\r",
									"});\r",
									"pm.test(\"Test Price\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.eql(111);\r",
									"});\r",
									"\r",
									"pm.test(\"Test checkin\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.include(\"2020-03-06\");\r",
									"});\r",
									"pm.test(\"Test checkout\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.include(\"2020-03-09\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{UpdatebookingBody}}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"",
									"pm.test(\"firstname Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Jim\");",
									"});",
									"pm.test(\"lastname Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Brown\");",
									"});",
									"pm.test(\"additionalneeds Booking is updated\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Breakfast and dinner\");",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check Booking\" , function () {",
									"    pm.expect (jsonData.booking).to.not.equal(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{my_booker_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{Update Booking (partial) Body}}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Created\");",
									"});",
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All bookings requests "
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}